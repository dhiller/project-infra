a/pkg/virt-handler/container-disk/mount.go b/pkg/virt-handler/container-disk/mount.go
index 6e1d350fe..9d9cb464b 100644
--- a/pkg/virt-handler/container-disk/mount.go
+++ b/pkg/virt-handler/container-disk/mount.go
@@ -4,6 +4,8 @@ import (
 	"encoding/json"
 	"errors"
 	"fmt"
+	"hash/crc32"
+	"io"
 	"os"
 	"path/filepath"
 	"strings"
@@ -34,6 +36,12 @@ const (
 	failedUnmountFmt         = "failed to unmount containerDisk %v: %v : %v"
 )
 
+var (
+	ErrChecksumMissing   = errors.New("missing checksum")
+	ErrChecksumMismatch  = errors.New("checksum mismatch")
+	ErrDiskContainerGone = errors.New("disk container is gone")
+)
+
 //go:generate mockgen -source $GOFILE -package=$GOPACKAGE -destination=generated_mock_$GOFILE
 
 type mounter struct {
@@ -45,12 +53,14 @@ type mounter struct {
 	socketPathGetter           containerdisk.SocketPathGetter
 	kernelBootSocketPathGetter containerdisk.KernelBootSocketPathGetter
 	clusterConfig              *virtconfig.ClusterConfig
+	nodeIsolationResult        isolation.IsolationResult
 }
 
 type Mounter interface {
 	ContainerDisksReady(vmi *v1.VirtualMachineInstance, notInitializedSince time.Time) (bool, error)
 	MountAndVerify(vmi *v1.VirtualMachineInstance) (map[string]*containerdisk.DiskInfo, error)
 	Unmount(vmi *v1.VirtualMachineInstance) error
+	ComputeChecksums(vmi *v1.VirtualMachineInstance) (*DiskChecksums, error)
 }
 
 type vmiMountTargetEntry struct {
@@ -63,6 +73,21 @@ type vmiMountTargetRecord struct {
 	UsesSafePaths      bool                  `json:"usesSafePaths"`
 }
 
+type kernelArtifacts struct {
+	kernel *safepath.Path
+	initrd *safepath.Path
+}
+
+type DiskChecksums struct {
+	KernelBootChecksum     KernelBootChecksum
+	ContainerDiskChecksums map[string]uint32
+}
+
+type KernelBootChecksum struct {
+	Initrd *uint32
+	Kernel *uint32
+}
+
 func NewMounter(isoDetector isolation.PodIsolationDetector, mountStateDir string, clusterConfig *virtconfig.ClusterConfig) Mounter {
 	return &mounter{
 		mountRecords:               make(map[types.UID]*vmiMountTargetRecord),
@@ -72,6 +97,7 @@ func NewMounter(isoDetector isolation.PodIsolationDetector, mountStateDir string
 		socketPathGetter:           containerdisk.NewSocketPathGetter(""),
 		kernelBootSocketPathGetter: containerdisk.NewKernelBootSocketPathGetter(""),
 		clusterConfig:              clusterConfig,
+		nodeIsolationResult:        isolation.NodeIsolationResult(),
 	}
 }
 
@@ -281,25 +307,11 @@ func (m *mounter) MountAndVerify(vmi *v1.VirtualMachineInstance) (map[string]*co
 				return nil, err
 			}
 
-			nodeRes := isolation.NodeIsolationResult()
-
 			if isMounted, err := isolation.IsMounted(targetFile); err != nil {
 				return nil, fmt.Errorf("failed to determine if %s is already mounted: %v", targetFile, err)
 			} else if !isMounted {
-				sock, err := m.socketPathGetter(vmi, i)
-				if err != nil {
-					return nil, err
-				}
 
-				res, err := m.podIsolationDetector.DetectForSocket(vmi, sock)
-				if err != nil {
-					return nil, fmt.Errorf("failed to detect socket for containerDisk %v: %v", volume.Name, err)
-				}
-				mountPoint, err := isolation.ParentPathForRootMount(nodeRes, res)
-				if err != nil {
-					return nil, fmt.Errorf("failed to detect root mount point of containerDisk %v on the node: %v", volume.Name, err)
-				}
-				sourceFile, err := containerdisk.GetImage(mountPoint, volume.ContainerDisk.Path)
+				sourceFile, err := m.getContainerDiskPath(vmi, &volume, i)
 				if err != nil {
 					return nil, fmt.Errorf("failed to find a sourceFile in containerDisk %v: %v", volume.Name, err)
 				}
@@ -446,8 +458,6 @@ func (m *mounter) mountKernelArtifacts(vmi *v1.VirtualMachineInstance, verify bo
 		return err
 	}
 
-	nodeRes := isolation.NodeIsolationResult()
-
 	var targetInitrdPath *safepath.Path
 	var targetKernelPath *safepath.Path
 
@@ -480,8 +490,15 @@ func (m *mounter) mountKernelArtifacts(vmi *v1.VirtualMachineInstance, verify bo
 			return false, err
 		}
 
-		mounted, err := nodeRes.AreMounted(artifactFiles...)
-		return mounted, err
+		for _, mountPoint := range artifactFiles {
+			if mountPoint != nil {
+				isMounted, err := isolation.IsMounted(mountPoint)
+				if !isMounted || err != nil {
+					return isMounted, err
+				}
+			}
+		}
+		return true, nil
 	}
 
 	if isMounted, err := areKernelArtifactsMounted(targetDir, targetInitrdPath, targetKernelPath); err != nil {
@@ -489,39 +506,22 @@ func (m *mounter) mountKernelArtifacts(vmi *v1.VirtualMachineInstance, verify bo
 	} else if !isMounted {
 		log.Log.Object(vmi).Infof("kernel artifacts are not mounted - mounting...")
 
-		res, err := m.podIsolationDetector.DetectForSocket(vmi, socketFilePath)
-		if err != nil {
-			return fmt.Errorf("failed to detect socket for containerDisk %v: %v", kernelBootName, err)
-		}
-		mountRootPath, err := isolation.ParentPathForRootMount(nodeRes, res)
+		kernelArtifacts, err := m.getKernelArtifactPaths(vmi)
 		if err != nil {
-			return fmt.Errorf("failed to detect root mount point of %v on the node: %v", kernelBootName, err)
+			return err
 		}
 
-		mount := func(artifactPath string, targetPath *safepath.Path) error {
-
-			sourcePath, err := containerdisk.GetImage(mountRootPath, artifactPath)
-			if err != nil {
-				return err
-			}
-
-			out, err := virt_chroot.MountChroot(sourcePath, targetPath, true).CombinedOutput()
+		if kernelArtifacts.kernel != nil {
+			out, err := virt_chroot.MountChroot(kernelArtifacts.kernel, targetKernelPath, true).CombinedOutput()
 			if err != nil {
 				return fmt.Errorf("failed to bindmount %v: %v : %v", kernelBootName, string(out), err)
 			}
-
-			return nil
 		}
 
-		if kb.InitrdPath != "" {
-			if err = mount(kb.InitrdPath, targetInitrdPath); err != nil {
-				return err
-			}
-		}
-
-		if kb.KernelPath != "" {
-			if err = mount(kb.KernelPath, targetKernelPath); err != nil {
-				return err
+		if kernelArtifacts.initrd != nil {
+			out, err := virt_chroot.MountChroot(kernelArtifacts.initrd, targetInitrdPath, true).CombinedOutput()
+			if err != nil {
+				return fmt.Errorf("failed to bindmount %v: %v : %v", kernelBootName, string(out), err)
 			}
 		}
 
@@ -609,3 +609,197 @@ func (m *mounter) unmountKernelArtifacts(vmi *v1.VirtualMachineInstance) error {
 
 	return fmt.Errorf("kernel artifacts record wasn't found")
 }
+
+func (m *mounter) getContainerDiskPath(vmi *v1.VirtualMachineInstance, volume *v1.Volume, volumeIndex int) (*safepath.Path, error) {
+	sock, err := m.socketPathGetter(vmi, volumeIndex)
+	if err != nil {
+		return nil, ErrDiskContainerGone
+	}
+
+	res, err := m.podIsolationDetector.DetectForSocket(vmi, sock)
+	if err != nil {
+		return nil, fmt.Errorf("failed to detect socket for containerDisk %v: %v", volume.Name, err)
+	}
+
+	mountPoint, err := isolation.ParentPathForRootMount(m.nodeIsolationResult, res)
+	if err != nil {
+		return nil, fmt.Errorf("failed to detect root mount point of containerDisk %v on the node: %v", volume.Name, err)
+	}
+
+	return containerdisk.GetImage(mountPoint, volume.ContainerDisk.Path)
+}
+
+func (m *mounter) getKernelArtifactPaths(vmi *v1.VirtualMachineInstance) (*kernelArtifacts, error) {
+	sock, err := m.kernelBootSocketPathGetter(vmi)
+	if err != nil {
+		return nil, ErrDiskContainerGone
+	}
+
+	res, err := m.podIsolationDetector.DetectForSocket(vmi, sock)
+	if err != nil {
+		return nil, fmt.Errorf("failed to detect socket for kernelboot container: %v", err)
+	}
+
+	mountPoint, err := isolation.ParentPathForRootMount(m.nodeIsolationResult, res)
+	if err != nil {
+		return nil, fmt.Errorf("failed to detect root mount point of kernel/initrd container on the node: %v", err)
+	}
+
+	kernelContainer := vmi.Spec.Domain.Firmware.KernelBoot.Container
+	kernelArtifacts := &kernelArtifacts{}
+
+	if kernelContainer.KernelPath != "" {
+		kernelPath, err := containerdisk.GetImage(mountPoint, kernelContainer.KernelPath)
+		if err != nil {
+			return nil, err
+		}
+		kernelArtifacts.kernel = kernelPath
+	}
+	if kernelContainer.InitrdPath != "" {
+		initrdPath, err := containerdisk.GetImage(mountPoint, kernelContainer.InitrdPath)
+		if err != nil {
+			return nil, err
+		}
+		kernelArtifacts.initrd = initrdPath
+	}
+
+	return kernelArtifacts, nil
+}
+
+func getDigest(imageFile *safepath.Path) (uint32, error) {
+	digest := crc32.NewIEEE()
+
+	err := imageFile.ExecuteNoFollow(func(path string) (err error) {
+		f, err := os.Open(path)
+		if err != nil {
+			return err
+		}
+		defer f.Close()
+
+		// 32 MiB chunks
+		chunk := make([]byte, 1024*1024*32)
+
+		_, err = io.CopyBuffer(digest, f, chunk)
+		return err
+	})
+
+	return digest.Sum32(), err
+}
+
+func (m *mounter) ComputeChecksums(vmi *v1.VirtualMachineInstance) (*DiskChecksums, error) {
+
+	diskChecksums := &DiskChecksums{
+		ContainerDiskChecksums: map[string]uint32{},
+	}
+
+	// compute for containerdisks
+	for i, volume := range vmi.Spec.Volumes {
+		if volume.VolumeSource.ContainerDisk == nil {
+			continue
+		}
+
+		path, err := m.getContainerDiskPath(vmi, &volume, i)
+		if err != nil {
+			return nil, err
+		}
+
+		checksum, err := getDigest(path)
+		if err != nil {
+			return nil, err
+		}
+
+		diskChecksums.ContainerDiskChecksums[volume.Name] = checksum
+	}
+
+	// kernel and initrd
+	if util.HasKernelBootContainerImage(vmi) {
+		kernelArtifacts, err := m.getKernelArtifactPaths(vmi)
+		if err != nil {
+			return nil, err
+		}
+
+		if kernelArtifacts.kernel != nil {
+			checksum, err := getDigest(kernelArtifacts.kernel)
+			if err != nil {
+				return nil, err
+			}
+
+			diskChecksums.KernelBootChecksum.Kernel = &checksum
+		}
+
+		if kernelArtifacts.initrd != nil {
+			checksum, err := getDigest(kernelArtifacts.initrd)
+			if err != nil {
+				return nil, err
+			}
+
+			diskChecksums.KernelBootChecksum.Initrd = &checksum
+		}
+	}
+
+	return diskChecksums, nil
+}
+
+func compareChecksums(expectedChecksum, computedChecksum uint32) error {
+	if expectedChecksum == 0 {
+		return ErrChecksumMissing
+	}
+	if expectedChecksum != computedChecksum {
+		return ErrChecksumMismatch
+	}
+	// checksum ok
+	return nil
+}
+
+func VerifyChecksums(mounter Mounter, vmi *v1.VirtualMachineInstance) error {
+	diskChecksums, err := mounter.ComputeChecksums(vmi)
+	if err != nil {
+		return fmt.Errorf("failed to compute checksums: %s", err)
+	}
+
+	// verify containerdisks
+	for _, volumeStatus := range vmi.Status.VolumeStatus {
+		if volumeStatus.ContainerDiskVolume == nil {
+			continue
+		}
+
+		expectedChecksum := volumeStatus.ContainerDiskVolume.Checksum
+		computedChecksum := diskChecksums.ContainerDiskChecksums[volumeStatus.Name]
+		if err := compareChecksums(expectedChecksum, computedChecksum); err != nil {
+			return fmt.Errorf("checksum error for volume %s: %w", volumeStatus.Name, err)
+		}
+	}
+
+	// verify kernel and initrd
+	if util.HasKernelBootContainerImage(vmi) {
+		if vmi.Status.KernelBootStatus == nil {
+			return ErrChecksumMissing
+		}
+
+		if diskChecksums.KernelBootChecksum.Kernel != nil {
+			if vmi.Status.KernelBootStatus.KernelInfo == nil {
+				return fmt.Errorf("checksum missing for kernel image: %w", ErrChecksumMissing)
+			}
+
+			expectedChecksum := vmi.Status.KernelBootStatus.KernelInfo.Checksum
+			computedChecksum := *diskChecksums.KernelBootChecksum.Kernel
+			if err := compareChecksums(expectedChecksum, computedChecksum); err != nil {
+				return fmt.Errorf("checksum error for kernel image: %w", err)
+			}
+		}
+
+		if diskChecksums.KernelBootChecksum.Initrd != nil {
+			if vmi.Status.KernelBootStatus.InitrdInfo == nil {
+				return fmt.Errorf("checksum missing for initrd image: %w", ErrChecksumMissing)
+			}
+
+			expectedChecksum := vmi.Status.KernelBootStatus.InitrdInfo.Checksum
+			computedChecksum := *diskChecksums.KernelBootChecksum.Initrd
+			if err := compareChecksums(expectedChecksum, computedChecksum); err != nil {
+				return fmt.Errorf("checksum error for initrd image: %w", err)
+			}
+		}
+	}
+
+	return nil
+}
