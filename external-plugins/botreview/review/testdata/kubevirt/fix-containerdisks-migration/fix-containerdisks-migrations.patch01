a/pkg/container-disk/container-disk.go b/pkg/container-disk/container-disk.go
index f16e86c51..3251d0478 100644
--- a/pkg/container-disk/container-disk.go
+++ b/pkg/container-disk/container-disk.go
@@ -399,9 +399,9 @@ func getContainerDiskSocketBasePath(baseDir, podUID string) string {
 }
 
 // ExtractImageIDsFromSourcePod takes the VMI and its source pod to determine the exact image used by containerdisks and boot container images,
-// which is recorded in the status section of a started pod.
+// which is recorded in the status section of a started pod; if the status section does not contain this info the tag is used.
 // It returns a map where the key is the vlume name and the value is the imageID
-func ExtractImageIDsFromSourcePod(vmi *v1.VirtualMachineInstance, sourcePod *kubev1.Pod) (imageIDs map[string]string, err error) {
+func ExtractImageIDsFromSourcePod(vmi *v1.VirtualMachineInstance, sourcePod *kubev1.Pod) (imageIDs map[string]string) {
 	imageIDs = map[string]string{}
 	for _, volume := range vmi.Spec.Volumes {
 		if volume.ContainerDisk == nil {
@@ -423,16 +423,12 @@ func ExtractImageIDsFromSourcePod(vmi *v1.VirtualMachineInstance, sourcePod *kub
 		if !exists {
 			continue
 		}
-		imageID, err := toImageWithDigest(image, status.ImageID)
-		if err != nil {
-			return nil, err
-		}
-		imageIDs[key] = imageID
+		imageIDs[key] = toPullableImageReference(image, status.ImageID)
 	}
 	return
 }
 
-func toImageWithDigest(image string, imageID string) (string, error) {
+func toPullableImageReference(image string, imageID string) string {
 	baseImage := image
 	if strings.LastIndex(image, "@sha256:") != -1 {
 		baseImage = strings.Split(image, "@sha256:")[0]
@@ -442,9 +438,11 @@ func toImageWithDigest(image string, imageID string) (string, error) {
 
 	digestMatches := digestRegex.FindStringSubmatch(imageID)
 	if len(digestMatches) < 2 {
-		return "", fmt.Errorf("failed to identify image digest for container %q with id %q", image, imageID)
+		// failed to identify image digest for container, will use the image tag
+		// as virt-handler will anyway check the checksum of the root disk image
+		return image
 	}
-	return fmt.Sprintf("%s@sha256:%s", baseImage, digestMatches[1]), nil
+	return fmt.Sprintf("%s@sha256:%s", baseImage, digestMatches[1])
 }
 
 func isImageVolume(containerName string) bool {
