a/pkg/virt-handler/container-disk/mount_test.go b/pkg/virt-handler/container-disk/mount_test.go
index b0f3b496f..bb34a07cd 100644
--- a/pkg/virt-handler/container-disk/mount_test.go
+++ b/pkg/virt-handler/container-disk/mount_test.go
@@ -21,16 +21,22 @@ package container_disk
 
 import (
 	"fmt"
+	"hash/crc32"
 	"os"
 	"path/filepath"
 	"time"
 
 	"kubevirt.io/client-go/api"
 
+	"kubevirt.io/kubevirt/pkg/safepath"
 	"kubevirt.io/kubevirt/pkg/testutils"
+	"kubevirt.io/kubevirt/pkg/virt-handler/isolation"
 
+	gomock "github.com/golang/mock/gomock"
+	mount "github.com/moby/sys/mountinfo"
 	. "github.com/onsi/ginkgo/v2"
 	. "github.com/onsi/gomega"
+	gomega_types "github.com/onsi/gomega/types"
 
 	containerdisk "kubevirt.io/kubevirt/pkg/container-disk"
 
@@ -174,4 +180,191 @@ var _ = Describe("ContainerDisk", func() {
 			Expect(record).To(BeNil())
 		})
 	})
+
+	Context("containerdisks checksum", func() {
+		var rootMountPoint string
+
+		diskContent := []byte{0x6B, 0x75, 0x62, 0x65, 0x76, 0x69, 0x72, 0x74}
+
+		BeforeEach(func() {
+			ctrl := gomock.NewController(GinkgoT())
+			mockIsolationDetector := isolation.NewMockPodIsolationDetector(ctrl)
+			mockNodeIsolationResult := isolation.NewMockIsolationResult(ctrl)
+			mockPodIsolationResult := isolation.NewMockIsolationResult(ctrl)
+
+			m.podIsolationDetector = mockIsolationDetector
+			m.nodeIsolationResult = mockNodeIsolationResult
+
+			m.socketPathGetter = func(vmi *v1.VirtualMachineInstance, volumeIndex int) (string, error) {
+				return "somewhere", nil
+			}
+			m.kernelBootSocketPathGetter = func(vmi *v1.VirtualMachineInstance) (string, error) {
+				return "somewhere-kernel", nil
+			}
+
+			mockIsolationDetector.EXPECT().DetectForSocket(gomock.Any(), gomock.Any()).Return(mockPodIsolationResult, nil)
+
+			mockPodIsolationResult.EXPECT().Mounts(gomock.Any()).Return([]*mount.Info{&mount.Info{Root: "/", Mountpoint: "/disks"}}, nil)
+
+			rootMountPoint, err = os.MkdirTemp(tmpDir, "root")
+			Expect(err).ToNot(HaveOccurred())
+			partentToChildMountPoint, err := os.MkdirTemp(rootMountPoint, "child")
+			Expect(err).ToNot(HaveOccurred())
+			mockNodeIsolationResult.EXPECT().Mounts(gomock.Any()).Return([]*mount.Info{&mount.Info{Root: partentToChildMountPoint}}, nil)
+
+			rootMountPointSafePath, err := safepath.NewPathNoFollow(rootMountPoint)
+			Expect(err).ToNot(HaveOccurred())
+			mockNodeIsolationResult.EXPECT().MountRoot().Return(rootMountPointSafePath, nil)
+		})
+
+		Context("verification", func() {
+
+			type args struct {
+				storedChecksum uint32
+				diskContent    []byte
+				verifyMatcher  gomega_types.GomegaMatcher
+			}
+
+			DescribeTable(" should", func(args *args) {
+				vmiVolume := vmi.Spec.Volumes[0]
+
+				err := os.WriteFile(filepath.Join(rootMountPoint, vmiVolume.ContainerDisk.Path), args.diskContent, 0660)
+				Expect(err).ToNot(HaveOccurred())
+
+				vmi.Status.VolumeStatus = []v1.VolumeStatus{
+					v1.VolumeStatus{
+						Name:                vmiVolume.Name,
+						ContainerDiskVolume: &v1.ContainerDiskInfo{Checksum: args.storedChecksum},
+					},
+				}
+
+				err = VerifyChecksums(m, vmi)
+				Expect(err).To(args.verifyMatcher)
+
+			},
+				Entry("succeed if source and target containerdisk match", &args{
+					storedChecksum: crc32.ChecksumIEEE(diskContent),
+					diskContent:    diskContent,
+					verifyMatcher:  Not(HaveOccurred()),
+				}),
+				Entry("fail if checksum is not present", &args{
+					storedChecksum: 0,
+					diskContent:    diskContent,
+					verifyMatcher:  And(HaveOccurred(), MatchError(ErrChecksumMissing)),
+				}),
+				Entry("fail if source and target containerdisk do not match", &args{
+					storedChecksum: crc32.ChecksumIEEE([]byte{0xde, 0xad, 0xbe, 0xef}),
+					diskContent:    diskContent,
+					verifyMatcher:  And(HaveOccurred(), MatchError(ErrChecksumMismatch)),
+				}),
+			)
+		})
+
+		Context("with custom kernel artifacts", func() {
+
+			type args struct {
+				kernel         []byte
+				initrd         []byte
+				kernelChecksum uint32
+				initrdChecksum uint32
+				verifyMatcher  gomega_types.GomegaMatcher
+			}
+
+			DescribeTable("verification should", func(args *args) {
+				kernelBootVMI := api.NewMinimalVMI("fake-vmi")
+				kernelBootVMI.Spec.Domain.Firmware = &v1.Firmware{
+					KernelBoot: &v1.KernelBoot{
+						Container: &v1.KernelBootContainer{},
+					},
+				}
+
+				if args.kernel != nil {
+					kernelFile, err := os.CreateTemp(rootMountPoint, kernelBootVMI.Spec.Domain.Firmware.KernelBoot.Container.KernelPath)
+					Expect(err).ToNot(HaveOccurred())
+					defer kernelFile.Close()
+
+					_, err = (kernelFile.Write(args.kernel))
+					Expect(err).ToNot(HaveOccurred())
+
+					kernelBootVMI.Spec.Domain.Firmware.KernelBoot.Container.KernelPath = filepath.Join("/", filepath.Base(kernelFile.Name()))
+				}
+
+				if args.initrd != nil {
+					initrdFile, err := os.CreateTemp(rootMountPoint, kernelBootVMI.Spec.Domain.Firmware.KernelBoot.Container.InitrdPath)
+					Expect(err).ToNot(HaveOccurred())
+					defer initrdFile.Close()
+
+					_, err = (initrdFile.Write(args.initrd))
+					Expect(err).ToNot(HaveOccurred())
+
+					kernelBootVMI.Spec.Domain.Firmware.KernelBoot.Container.InitrdPath = filepath.Join("/", filepath.Base(initrdFile.Name()))
+				}
+
+				kernelBootVMI.Status.KernelBootStatus = &v1.KernelBootStatus{}
+				if args.kernel != nil {
+					kernelBootVMI.Status.KernelBootStatus.KernelInfo = &v1.KernelInfo{Checksum: args.kernelChecksum}
+				}
+				if args.initrd != nil {
+					kernelBootVMI.Status.KernelBootStatus.InitrdInfo = &v1.InitrdInfo{Checksum: args.initrdChecksum}
+				}
+
+				err = VerifyChecksums(m, kernelBootVMI)
+				Expect(err).To(args.verifyMatcher)
+			},
+				Entry("succeed when source and target custom kernel match", &args{
+					kernel:         diskContent,
+					kernelChecksum: crc32.ChecksumIEEE(diskContent),
+					verifyMatcher:  Not(HaveOccurred()),
+				}),
+				Entry("succeed when source and target custom initrd match", &args{
+					initrd:         diskContent,
+					initrdChecksum: crc32.ChecksumIEEE(diskContent),
+					verifyMatcher:  Not(HaveOccurred()),
+				}),
+				Entry("succeed when source and target custom kernel and initrd match", &args{
+					kernel:         []byte{0xA, 0xB, 0xC, 0xD},
+					kernelChecksum: crc32.ChecksumIEEE([]byte{0xA, 0xB, 0xC, 0xD}),
+					initrd:         []byte{0x1, 0x2, 0x3, 0x4},
+					initrdChecksum: crc32.ChecksumIEEE([]byte{0x1, 0x2, 0x3, 0x4}),
+					verifyMatcher:  Not(HaveOccurred()),
+				}),
+				Entry("fail when source and target custom kernel do not match", &args{
+					kernel:         diskContent,
+					kernelChecksum: crc32.ChecksumIEEE([]byte{0xA, 0xB, 0xC, 0xD}),
+					verifyMatcher:  And(HaveOccurred(), MatchError(ErrChecksumMismatch)),
+				}),
+				Entry("fail when source and target custom initrd do not match", &args{
+					initrd:         diskContent,
+					initrdChecksum: crc32.ChecksumIEEE([]byte{0xA, 0xB, 0xC, 0xD}),
+					verifyMatcher:  And(HaveOccurred(), MatchError(ErrChecksumMismatch)),
+				}),
+				Entry("fail when checksum is missing", &args{
+					kernel:        diskContent,
+					initrd:        diskContent,
+					verifyMatcher: And(HaveOccurred(), MatchError(ErrChecksumMissing)),
+				}),
+				Entry("fail when source and target custom kernel match but initrd does not", &args{
+					kernel:         []byte{0xA, 0xB, 0xC, 0xD},
+					kernelChecksum: crc32.ChecksumIEEE([]byte{0xA, 0xB, 0xC, 0xD}),
+					initrd:         []byte{0xF, 0xF, 0xE, 0xE},
+					initrdChecksum: crc32.ChecksumIEEE([]byte{0xA, 0xB, 0xC, 0xD}),
+					verifyMatcher:  And(HaveOccurred(), MatchError(ErrChecksumMismatch)),
+				}),
+				Entry("fail when source and target custom initrd match but kernel does not", &args{
+					kernel:         []byte{0xF, 0xF, 0xE, 0xE},
+					kernelChecksum: crc32.ChecksumIEEE([]byte{0xA, 0xB, 0xC, 0xD}),
+					initrd:         []byte{0x1, 0x2, 0x3, 0x4},
+					initrdChecksum: crc32.ChecksumIEEE([]byte{0x1, 0x2, 0x3, 0x4}),
+					verifyMatcher:  And(HaveOccurred(), MatchError(ErrChecksumMismatch)),
+				}),
+				Entry("fail when source and target custom initrd and kernel do not match", &args{
+					kernel:         []byte{0xF, 0xF, 0xE, 0xE},
+					kernelChecksum: crc32.ChecksumIEEE([]byte{0xA, 0xB, 0xC, 0xD}),
+					initrd:         []byte{0xA, 0xB, 0xC, 0xD},
+					initrdChecksum: crc32.ChecksumIEEE([]byte{0x1, 0x2, 0x3, 0x4}),
+					verifyMatcher:  And(HaveOccurred(), MatchError(ErrChecksumMismatch)),
+				}),
+			)
+		})
+	})
 })
